#define A 12
#define B 13
#define C 7
#define D 8
#define E 9
#define F 11
#define G 10
#define botonReseteo 5
#define gndUnidad A4
#define botonSumar 3
#define botonRestar 4
#define gndDecimal A5 //Defino nuevo nombres a los pines y los botones
int numeros = 0;
int decimales = 0;
int sumar = 0;
int restar = 0;
int reseteo = 0; //Declaro las variables antes de utilizarlas
void setup()
{
  pinMode (botonReseteo, INPUT_PULLUP);
  pinMode (botonSumar, INPUT_PULLUP);
  pinMode (botonRestar, INPUT_PULLUP); //Utilizo el INPUT_PULLUP para que se active cada vez que lo presione
  pinMode (gndUnidad, OUTPUT);
  pinMode (gndDecimal, OUTPUT);
  pinMode (A, OUTPUT);
  pinMode (B, OUTPUT);
  pinMode (C, OUTPUT);
  pinMode (D, OUTPUT);
  pinMode (E, OUTPUT);
  pinMode (F, OUTPUT);
  pinMode (G, OUTPUT);  //Defino salidas de los pines y botones
  Serial.begin(9600);  //Utilizo para debugear y visualizar en la terminal algun tipo de error
}


void loop()
{
  if(decimales == 0)
  {
    digitalWrite(gndDecimal, HIGH);  //Si el contador no es mayor a 9 que no se active los numeros decimales
  }
  sumar = digitalRead(botonSumar);
  restar = digitalRead(botonRestar);
  reseteo = digitalRead(botonReseteo);  //Leo el valor del boton cada vez que es presionado
  digitalPrint(numeros); //Llamo a la funcion (digitalPrint), la cual me va a imprimir los numeros en el led de 7 segmentos, el cual le tengo que pasar una variable de tipo INT.
  	if (reseteo == 0) // Si se presiona el boton reseteo el contador va a valer 0.
    {
      numeros = 0;
      decimales = 0; 
    }
  
  	if (sumar == 0) //Si se presiona el boton sumar que realize las siguientes acciones:
    {
      numeros++; //Que se sume de a uno el valor que le paso a la funcion
      if(decimales >= 9 and numeros > 9)  
      {
        decimales = 0;
      	numeros = 0;  //si los numeros superan el valor a 99 que se vuelva a contar desde 0
      }
      if (numeros > 9 and decimales < 9) 
      {
        decimales++;
      	numeros = 0; //Si las unidades pasan a ser mayores que 9 y los decimales son menores a 9, se le agrega un numero al decimal.
      }
    }
  	if (restar == 0) //Resta unidades al contador
    {
      numeros --; //Resta
      if (numeros < 0 and decimales > 0) //Si hay valores decimales y si las unidades pasan a ser menores a 0
      {
        decimales --;
      	numeros = 9; //Solo se restan los valores decimles y la unidad pasa a ser 9
      }
      if (numeros <0 and decimales == 0)
      {
        numeros = 9;
      	decimales = 9; //si los numeros son menores a 00 que pase a ser 99
      }
    }
  	
  	if (decimales > 0 and decimales < 10) 
    {
    	  digitalWrite(gndDecimal, LOW);
      	digitalWrite(gndUnidad, HIGH);
      	digitalPrint(decimales);
      	delay(50); //Que se muestren los numeros decimales por 50 milisegundos y luego pasen a mostrarse los valores en unidades
      	digitalWrite(gndUnidad, LOW);
      	digitalWrite(gndDecimal, HIGH);
      	digitalPrint(numeros);
    
    }

      
  delay(50);
  	
}
void digitalPrint(int numero)  //Funcion para prender o apagar en el led dependiendo del numero que se quiera mostrar
{
  digitalWrite(A, LOW);
  digitalWrite(B, LOW);
  digitalWrite(C, LOW);
  digitalWrite(D, LOW);
  digitalWrite(E, LOW);
  digitalWrite(F, LOW);
  digitalWrite(G, LOW);
  switch (numero)
  {
    case 0:
    {
    	digitalWrite(A, HIGH);
  		digitalWrite(B, HIGH);
  		digitalWrite(C, HIGH);
  		digitalWrite(D, HIGH);
  		digitalWrite(E, HIGH);
  		digitalWrite(F, HIGH);
  		digitalWrite(G, LOW);
      	break;
    }
    case 1:
    {
    	digitalWrite(A, LOW);
  		digitalWrite(B, HIGH);
  		digitalWrite(C, HIGH);
  		digitalWrite(D, LOW);
  		digitalWrite(E, LOW);
  		digitalWrite(F, LOW);
  		digitalWrite(G, LOW);
      	break;
    }
    case 2:
    {
    	digitalWrite(A, HIGH);
  		digitalWrite(B, HIGH);
  		digitalWrite(C, LOW);
  		digitalWrite(D, HIGH);
  		digitalWrite(E, HIGH);
  		digitalWrite(F, LOW);
  		digitalWrite(G, HIGH);
      	break;
    }
    case 3:
    {
    	digitalWrite(A, HIGH);
  		digitalWrite(B, HIGH);
  		digitalWrite(C, HIGH);
  		digitalWrite(D, HIGH);
  		digitalWrite(E, LOW);
  		digitalWrite(F, LOW);
  		digitalWrite(G, HIGH);
      	break;
    }
    case 4:
    {
    	digitalWrite(A, LOW);
  		digitalWrite(B, HIGH);
  		digitalWrite(C, HIGH);
  		digitalWrite(D, LOW);
  		digitalWrite(E, LOW);
  		digitalWrite(F, HIGH);
  		digitalWrite(G, HIGH);
      	break;
    }
    case 5:
    {
    	digitalWrite(A, HIGH);
  		digitalWrite(B, LOW);
  		digitalWrite(C, HIGH);
  		digitalWrite(D, HIGH);
  		digitalWrite(E, LOW);
  		digitalWrite(F, HIGH);
  		digitalWrite(G, HIGH);
      	break;
    }
    case 6:
    {
    	digitalWrite(A, HIGH);
  		digitalWrite(B, LOW);
  		digitalWrite(C, HIGH);
  		digitalWrite(D, HIGH);
  		digitalWrite(E, HIGH);
  		digitalWrite(F, HIGH);
  		digitalWrite(G, HIGH);
      	break;
    }
    case 7:
    {
    	digitalWrite(A, HIGH);
  		digitalWrite(B, HIGH);
  		digitalWrite(C, HIGH);
  		digitalWrite(D, LOW);
  		digitalWrite(E, LOW);
  		digitalWrite(F, LOW);
  		digitalWrite(G, LOW);
      	break;
    }
    case 8:
    {
    	digitalWrite(A, HIGH);
  		digitalWrite(B, HIGH);
  		digitalWrite(C, HIGH);
  		digitalWrite(D, HIGH);
  		digitalWrite(E, HIGH);
  		digitalWrite(F, HIGH);
  		digitalWrite(G, HIGH);
      	break;
    }
    case 9:
    {
    	digitalWrite(A, HIGH);
  		digitalWrite(B, HIGH);
  		digitalWrite(C, HIGH);
  		digitalWrite(D, LOW);
  		digitalWrite(E, LOW);
  		digitalWrite(F, HIGH);
  		digitalWrite(G, HIGH);
      	break;
    }
        case 10:
    {

    }
  }
}
